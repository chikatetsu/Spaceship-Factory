using System.Collections.Generic;

namespace SpaceshipFactory.Piece
{
    public class Spaceship
    {
        public readonly string Name;
        public Hull? Hull { get; private set; }
        public List<Engine?> Engines { get; private set; }
        public List<Wings?> Wings { get; private set; }
        public List<Thruster?> Thrusters { get; private set; }

        public Spaceship(string name)
        {
            Name = name;
            Engines = new List<Engine?>();
            Wings = new List<Wings?>();
            Thrusters = new List<Thruster?>();
        }

        public bool AddPiece(Piece? piece)
        {
            if (piece == null) return false;

            switch (piece)
            {
                case Hull hull:
                    if (Hull != null) return false;
                    Hull = hull;
                    break;
                case Engine engine:
                    if (Engines.Count >= 2) return false;
                    Engines.Add(engine);
                    break;
                case Wings wings:
                    if (Wings.Count >= 2) return false;
                    Wings.Add(wings);
                    break;
                case Thruster thruster:
                    if (Thrusters.Count >= 3) return false;
                    Thrusters.Add(thruster);
                    break;
                default:
                    return false;
            }
            return true;
        }

        public bool RemovePiece(Piece piece)
        {
            switch (piece)
            {
                case Hull hull when Hull == hull:
                    Hull = null;
                    break;
                case Engine engine when Engines.Contains(engine):
                    Engines.Remove(engine);
                    break;
                case Wings wings when Wings.Contains(wings):
                    Wings.Remove(wings);
                    break;
                case Thruster thruster when Thrusters.Contains(thruster):
                    Thrusters.Remove(thruster);
                    break;
                default:
                    return false;
            }
            return true;
        }

        public bool IsValid()
        {
            return Hull != null && Engines.Count >= 1 && Engines.Count <= 2 &&
                   Wings.Count >= 1 && Wings.Count <= 2 &&
                   Thrusters.Count >= 1 && Thrusters.Count <= 3 &&
                   (Thrusters.Count <= 2 || Engines.Count == 2);
        }

        public Piece? GetPieceByName(string pieceName)
        {
            if (Hull != null && Hull.Name == pieceName) return Hull;
            foreach (var engine in Engines.Where(engine => engine?.Name == pieceName))
            {
                return engine;
            }
            foreach (var wings in Wings.Where(wings => wings?.Name == pieceName))
            {
                return wings;
            }

            return Thrusters.FirstOrDefault(thruster => thruster?.Name == pieceName);
        }

        /** The following methods are generated by Rider's "Generate" feature. */
        public override string ToString()
        {
            return Name;
        }

        public override bool Equals(object? obj)
        {
            if (obj is Spaceship spaceship)
            {
                return Name == spaceship.Name;
            }
            return false;
        }

        public override int GetHashCode()
        {
            return Name.GetHashCode();
        }
    }
}
