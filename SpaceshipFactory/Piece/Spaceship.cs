namespace SpaceshipFactory.Piece;

public class Spaceship
{
    public readonly string Name;
    public readonly Dictionary<Piece, uint> Pieces;

    public Spaceship(string name, Dictionary<Piece, uint> pieces)
    {
        Name = name;
        Pieces = pieces;
    }

    public Spaceship(string name)
    {
        Name = name;
        Pieces = new Dictionary<Piece, uint>();
    }
    
    public Spaceship AddPiece(Piece piece, uint quantity)
    {
        if (!Pieces.TryAdd(piece, quantity))
        {
            Pieces[piece] += quantity;
        }
        
        return this;
    }
    
    public bool RemovePiece(Piece piece, uint quantity)
    {
        if (!Pieces.ContainsKey(piece))
        {
            return false;
        }

        Pieces[piece] -= quantity;
        if (Pieces[piece] == 0)
        {
            Pieces.Remove(piece);
        }

        return true;
    }
    
    public bool Validate()
    {
        int hullCount = 0;
        int engineCount = 0;
        int wingsCount = 0;
        int thrusterCount = 0;

        foreach (var piece in Pieces)
        {
            if (piece.Key is Hull) hullCount += (int)piece.Value;
            if (piece.Key is Engine) engineCount += (int)piece.Value;
            if (piece.Key is Wings) wingsCount += (int)piece.Value;
            if (piece.Key is Thruster) thrusterCount += (int)piece.Value;
        }

        if (hullCount != 1) return false;
        if (engineCount < 1 || engineCount > 2) return false;
        if (wingsCount != 1 && wingsCount != 2) return false;
        if (thrusterCount < 1 || thrusterCount > 3) return false;
        if (thrusterCount > 2 && engineCount < 2) return false;

        return true;
    }
    
    /** The following methods are generated by Rider's "Generate" feature. */
    public override string ToString()
    {
        return Name;
    }

    public override bool Equals(object? obj)
    {
        if (obj is Spaceship spaceship)
        {
            return Name == spaceship.Name;
        }
        return false;
    }

    public override int GetHashCode()
    {
        return Name.GetHashCode();
    }
}
